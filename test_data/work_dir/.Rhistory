R$mut <- NULL
R <- as.matrix(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
K = 4:7 # number of subclones
numchain = 8 # number of chains with random initiations
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = C, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = NULL, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
View(Y)
View(X)
View(C)
setwd("~/git/pipeline_for_Canopy/")
projectname = 'tets_run' ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
K = 4:7 # number of subclones
numchain = 8 # number of chains with random initiations
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = C, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
View(Y)
C <- t(as.matrix(C))
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = C, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = NULL, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = NULL, C = NULL, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = C, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = NULL, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
K = 3:6 # number of subclones
numchain = 4 # number of chains with random initiations
sampchain = canopy.sample(R = R, X = X, WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, Y = Y, C = NULL, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
?canopy.cluster
num_cluster=2:6 # Range of number of clusters to run
num_run=6 # How many EM runs per clustering step for each mutation cluster wave
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
dimnames(out) = dimnames(R)
?dimnames
View(R)
R = na.omit(R)
?na.omit
R <- na.omit(R)
X <- na.omit(X)
toKeep <- as.numeric(rowSums(R == X)) == 0
R = R[toKeep,]; X = X[toKeep,]
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = C, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = NULL, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
toKeep <- as.numeric(rowSums(R == X)) == 0
R = R[toKeep,]; X = X[toKeep,]; Y = Y[toKeep]
num_cluster=2:6 # Range of number of clusters to run
num_run=6 # How many EM runs per clustering step for each mutation cluster wave
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = NULL, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
setwd("~/git/pipeline_for_Canopy/")
projectname = 'tets_run' ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
X <- na.omit(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
num_cluster=2:6 # Range of number of clusters to run
num_run=6 # How many EM runs per clustering step for each mutation cluster wave
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
setwd("~/git/pipeline_for_Canopy/")
projectname = 'tets_run' ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
X <- na.omit(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = NULL, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
projectname = 'tets_run' ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
X <- na.omit(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
num_cluster=2:6 # Range of number of clusters to run
num_run=6 # How many EM runs per clustering step for each mutation cluster wave
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = NULL, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
K = 3:6 # number of subclones
numchain = 6 # number of chains with random initiations
sampchain = canopy.sample.nocna(R = R, X = X, K = K, numchain = numchain,
max.simrun = 50000, min.simrun = 10000, writeskip = 200, projectname = projectname)
burnin = 100
thin = 5
bic = canopy.BIC(sampchain = sampchain, projectname = projectname, K = K,
numchain = numchain, burnin = burnin, thin = thin, pdf = TRUE)
K = 3:10 # number of subclones
numchain = 8 # number of chains with random initiations
sampchain = canopy.sample.nocna(R = R, X = X, K = K, numchain = numchain,
max.simrun = 50000, min.simrun = 10000, writeskip = 200, projectname = projectname)
burnin = 100
thin = 5
bic = canopy.BIC(sampchain = sampchain, projectname = projectname, K = K,
numchain = numchain, burnin = burnin, thin = thin, pdf = TRUE)
setwd("~/git/pipeline_for_Canopy/")
projectname = 'tets_run' ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
X <- na.omit(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
num_cluster=2:6 # Range of number of clusters to run
num_run=6 # How many EM runs per clustering step for each mutation cluster wave
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = C, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
View(R)
View(C)
View(R)
View(WM)
View(Wm)
View(X)
View(Y)
p
library(Canopy)
setwd("~/git/pipeline_for_Canopy/")
projectname = 'tets_run' ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
X <- na.omit(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
num_cluster=2:6 # Range of number of clusters to run
num_run=6 # How many EM runs per clustering step for each mutation cluster wave
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = C, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
X <- read.table('Xout.txt', header = T) ## total depth (for SNAs)
rownames(X) <- X[,1]
X$mut <- NULL
X <- as.matrix(X)
X <- na.omit(X)
WM <- read.table('WMout.txt', header = T)  ## observed major copy number (for CNA regions)
rownames(WM) <- WM[,1]
WM$CNA_mutation <- NULL
WM <- as.matrix(WM)
Wm <- read.table('Wmout.txt', header = T) ## observed minor copy number (for CNA regions)
rownames(Wm) <- Wm[,1]
Wm$CNA_mutation <- NULL
Wm <- as.matrix(Wm)
epsilonM = 0.01 ## standard deviation of WM, pre-fixed here
epsilonm = 0.01 ## standard deviation of Wm, pre-fixed here
C <- read.table('Cout.txt', header = T, check.names = F)
rownames(C) <- C[,1]
C$CNAs <- NULL
C <- as.matrix(C)
Y <- read.table('Yout.txt', header = T, check.names = F) ## whether SNAs are affected by CNAs
rownames(Y) <- Y[,1]
Y$mut <- NULL
Y <- as.matrix(Y)
canopy.cluster=canopy.cluster(R = R, X = X, num_cluster = num_cluster, num_run = num_run)
bic_output=canopy.cluster$bic_output
sna_cluster=canopy.cluster$sna_cluster
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = C, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
K = 3:5 # number of subclones
numchain = 7 # number of chains with random initiations
K = 3:5 # number of subclones
numchain = 5 # number of chains with random initiations
sampchain = canopy.sample.cluster(R = R, X = X, sna_cluster = sna_cluster,
WM = WM, Wm = Wm, epsilonM = epsilonM,
epsilonm = epsilonm, C = C, Y = Y, K = K,
numchain = numchain, max.simrun = 100000,
min.simrun = 20000, writeskip = 200,
projectname = projectname, cell.line = TRUE,
plot.likelihood = TRUE)
save.image(file = 'a1.RData')
burnin = 100
thin = 5
bic = canopy.BIC(sampchain = sampchain, projectname = projectname, K = K,
numchain = numchain, burnin = burnin, thin = thin, pdf = TRUE)
optK = K[which.max(bic)]
post = canopy.post(sampchain = sampchain, projectname = projectname, K = K,
numchain = numchain, burnin = burnin, thin = thin,
optK = optK, C = C, post.config.cutoff = 0.05)
samptreethin = post[[1]]   # list of all post-burnin and thinning trees
samptreethin.lik = post[[2]]   # likelihoods of trees in samptree
config = post[[3]]
config.summary = post[[4]]
print(config.summary)
config.i = config.summary[which.max(config.summary[,3]),1]
cat('Configuration', config.i, 'has the highest posterior likelihood.\n')
output.tree = canopy.output(post, config.i, C)
pdf.name = paste(projectname, '_config_highest_likelihood.pdf', sep='')
canopy.plottree(output.tree, pdf = TRUE, pdf.name = pdf.name)
output.tree = canopy.output(post, 3, C)
canopy.plottree(output.tree, pdf=TRUE, pdf.name = paste(projectname, '_third_config.pdf', sep = ''))
View(samptreethin.lik)
View(samptreethin)
View(config)
?canopy.output
?canopy.plottree
setwd("./")
library(args)
'asd'+'wer'
past('asd','wer', sep = '')
paste('asd','wer', sep = '')
paste0('asd','wer')
paste0('asd','wer','xcv')
paste0(arguments[1],arguments[2],'xcv')
'swer'[-1]
s <- 'swer'
s[-1]
s[1]
s(1)
library(Canopy)
setwd("~/git/pipeline_for_Canopy/test_data/work_dir")
projectname = H002 # arguments[2] ## name of project
projectname = 'H002' # arguments[2] ## name of project
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
View(R)
R <- as.matrix(R)
View(R)
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
View(R)
View(R)
sapply(R, class)
View(R)
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
View(R)
R <- read.csv2('Rout.txt', header = T, rownames = 1) ## mutant allele read depth (for SNAs)
R <- read.csv2('Rout.txt', header = T, row.names = 1) ## mutant allele read depth (for SNAs)
View(R)
R <- read.csv2('Rout.txt', sep = "\t", header = T, row.names = 1) ## mutant allele read depth (for SNAs)
View(R)
R <- read.csv2('Rout.txt', sep = "\t", header = T, row.names = 2) ## mutant allele read depth (for SNAs)
R <- read.csv2('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
View(R)
R <- read.table('Rout.txt', header = T) ## mutant allele read depth (for SNAs)
rownames(R) <- R[,1]
R$mut <- NULL
R <- as.matrix(R)
R <- na.omit(R)
View(R)
